export class BaseElement {
  adoptedStyles?: CSSStyleDeclaration;
  styles?: string;
  state?: any;
  connected: () => void;
  disconnected: () => void;
}

export class ElementArt extends BaseElement {
  render(state?: any): HTMLElement;
}

export class AsyncElementArt extends BaseElement {
  render(state?: any): Promise<HTMLElement>;
}

export class FormInput extends ElementArt {
  type: string;
  value: string;
}

export interface MakeElementOptions {
  property: string;
  camelToDash?: boolean;
}

export function htmlFor(label: HTMLLabelElement, input: HTMLInputElement, id: string): void;
export function makeElements<K extends keyof HTMLElementTagNameMap>(tag: K, options?: MakeElementOptions): { [key: string]: HTMLElementTagNameMap[K] };

export function makeArt<T, K>(elementClass: { new() : T }, name?: string): (state?: K) => T;
export function makeAsyncArt<T, K>(elementClass: { new() : T }, name?: string): (state?: K) => Promise<T>;

export class Router {
  constructor(root: HTMLElement);

  add(match: string | RegExp, handler: (params?: { [key: string]: string }) => HTMLElement): void;

  remove(): void;
}

export function pushState(url: string, state?: any): void;
export function start(): void;
export function routerLink(properties: Partial<HTMLAnchorElement> & { state?: any }): HTMLAnchorElement;
export function setNotFound(element: HTMLElement): void;

export const divs: { 
  [key: string]: HTMLDivElement;
}

export const setters: {
  [key: string]: (values: { [key: string]: any }, elements: { [key: string]: HTMLElement }) => void;
}

export const events: {
  [key: string]: any;
  onAbort(target: AbortSignal, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onEnded(target: AudioScheduledSourceNode, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onMessageError(target: BroadcastChannel, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMessage(target: BroadcastChannel, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAnimationCancel(target: Document, listener: (e: AnimationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAnimationEnd(target: Document, listener: (e: AnimationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAnimationIteration(target: Document, listener: (e: AnimationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAnimationStart(target: Document, listener: (e: AnimationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCopy(target: Document, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCut(target: Document, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDOMContentLoaded(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onDragEnd(target: Document, listener: (e: DragEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDragEnter(target: Document, listener: (e: DragEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDragLeave(target: Document, listener: (e: DragEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDragOver(target: Document, listener: (e: DragEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDragStart(target: Document, listener: (e: DragEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDrag(target: Document, listener: (e: DragEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDrop(target: Document, listener: (e: DragEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onFullScreenChange(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onFullScreenError(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onGotPointerCapture(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onKeyDown(target: Document, listener: (e: KeyboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onKeyPress(target: Document, listener: (e: KeyboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onKeyUp(target: Document, listener: (e: KeyboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLostPointerCapture(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPaste(target: Document, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerCancel(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerDown(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerEnter(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerLeave(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerLockChange(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerLockError(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerMove(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerOut(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerOver(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerUp(target: Document, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onReadyStateChange(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onScroll(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSelectionChange(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSelectStart(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onTouchCancel(target: Document, listener: (e: TouchEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTouchEnd(target: Document, listener: (e: TouchEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTouchMove(target: Document, listener: (e: TouchEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTouchStart(target: Document, listener: (e: TouchEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTransitionCancel(target: Document, listener: (e: TransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTransitionEnd(target: Document, listener: (e: TransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTransitionRun(target: Document, listener: (e: TransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTransitionStart(target: Document, listener: (e: TransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onVisibilityChange(target: Document, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onWheel(target: Document, listener: (e: WheelEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAuxClick(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onBlur(target: Element, listener: (e: FocusEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onClick(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCompositionEnd(target: Element, listener: (e: CompositionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCompositionStart(target: Element, listener: (e: CompositionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCompositionUpdate(target: Element, listener: (e: CompositionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onContextMenu(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCopy(target: Element, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCut(target: Element, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDblClick(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: Element, listener: (e: Event | UIEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onFocusIn(target: Element, listener: (e: FocusEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onFocusOut(target: Element, listener: (e: FocusEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onFocus(target: Element, listener: (e: FocusEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onFullScreenChange(target: Element, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onFullScreenError(target: Element, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onKeyDown(target: Element, listener: (e: KeyboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onKeyPress(target: Element, listener: (e: KeyboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onKeyUp(target: Element, listener: (e: KeyboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMouseDown(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMouseEnter(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMouseLeave(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMouseMove(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMouseOut(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMouseOver(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMouseUp(target: Element, listener: (e: MouseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPaste(target: Element, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onScroll(target: Element, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSelect(target: Element, listener: (e: Event | UIEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTouchCancel(target: Element, listener: (e: TouchEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTouchEnd(target: Element, listener: (e: TouchEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTouchMove(target: Element, listener: (e: TouchEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTouchStart(target: Element, listener: (e: TouchEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onWheel(target: Element, listener: (e: WheelEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: EventSource, listener: (e: Event | ErrorEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMessage(target: EventSource, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onOpen(target: EventSource, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onAbort(target: FileReader, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: FileReader, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLoadEnd(target: FileReader, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLoadStart(target: FileReader, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLoad(target: FileReader, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onProgress(target: FileReader, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onWebGLContextCreationError(target: HTMLCanvasElement, listener: (e: WebGLContextEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onWebGLContextLost(target: HTMLCanvasElement, listener: (e: WebGLContextEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onWebGLContextRestored(target: HTMLCanvasElement, listener: (e: WebGLContextEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onToggle(target: HTMLDetailsElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onAnimationCancel(target: HTMLElement, listener: (e: AnimationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAnimationEnd(target: HTMLElement, listener: (e: AnimationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAnimationIteration(target: HTMLElement, listener: (e: AnimationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAnimationStart(target: HTMLElement, listener: (e: AnimationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onBeforeInput(target: HTMLElement, listener: (e: InputEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onChange(target: HTMLElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onGotPointerCapture(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onInput(target: HTMLElement, listener: (e: Event | InputEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLostPointerCapture(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerCancel(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerDown(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerEnter(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerLeave(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerLockChange(target: HTMLElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerLockError(target: HTMLElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerMove(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerOut(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerOver(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPointerUp(target: HTMLElement, listener: (e: PointerEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTransitionCancel(target: HTMLElement, listener: (e: TransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTransitionEnd(target: HTMLElement, listener: (e: TransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTransitionRun(target: HTMLElement, listener: (e: TransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTransitionStart(target: HTMLElement, listener: (e: TransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onFormData(target: HTMLFormElement, listener: (e: FormDataEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onReset(target: HTMLFormElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSubmit(target: HTMLFormElement, listener: (e: SubmitEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onInvalid(target: HTMLInputElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSearch(target: HTMLInputElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onAbort(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onCanPlayThrough(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onCanPlay(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onDurationChange(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onEmptied(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onEnded(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onLoadedData(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onLoadedMetadata(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onLoadStart(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onPause(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onPlaying(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onPlay(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onProgress(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onRateChange(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSeeked(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSeeking(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onStalled(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSuspend(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onTimeUpdate(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onVolumeChange(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onWaiting(target: HTMLMediaElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSlotChange(target: HTMLSlotElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onCueChange(target: HTMLTrackElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onEnterPictureInPicture(target: HTMLVideoElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onLeavePictureInPicture(target: HTMLVideoElement, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onAbort(target: IDBTransaction, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onClose(target: IDBDatabase, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: IDBTransaction, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onVersionChange(target: IDBDatabase, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onBlocked(target: IDBOpenDBRequest, listener: (e: IDBVersionChangeEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onUpdatedNeeded(target: IDBOpenDBRequest, listener: (e: IDBVersionChangeEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: IDBRequest, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSuccess(target: IDBRequest, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onComplete(target: IDBTransaction, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onDeviceChange(target: MediaDevices, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: MediaRecorder, listener: (e: MediaRecorderErrorEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onAddTrack(target: MediaStream, listener: (e: MediaStreamTrackEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onRemoveTrack(target: MediaStream, listener: (e: MediaStreamTrackEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onEnded(target: MediaStreamTrack, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onMute(target: MediaStreamTrack, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onUnMute(target: MediaStreamTrack, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onMessageError(target: MessagePort, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMessage(target: MessagePort, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onComplete(target: OfflineAudioContext, listener: (e: OfflineAudioCompletionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onResourceTimingBufferFull(target: Performance, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onResize(target: PictureInPictureWindow, listener: (e: PictureInPictureWindow) => void, options?: boolean | AddEventListenerOptions): void;
  onBufferedAmountLow(target: RTCDataChannel, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onClose(target: RTCDataChannel, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onClosing(target: RTCDataChannel, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: RTCDataChannel, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onMessage(target: RTCDataChannel, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onOpen(target: RTCDataChannel, listener: (e: RTCDataChannelEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: RTCDtlsTransport, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onToneChange(target: RTCDTMFSender, listener: (e: RTCDTMFToneChangeEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onGatheringStateChange(target: RTCIceTransport, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSelectedCandidatePairChange(target: RTCIceTransport, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onStateChange(target: RTCIceTransport, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onConnectionStateChange(target: RTCPeerConnection, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onDataChannel(target: RTCPeerConnection, listener: (e: RTCDataChannelEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onIceCandidateError(target: RTCPeerConnection, listener: (e: RTCPeerConnectionIceErrorEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onIceCandidate(target: RTCPeerConnection, listener: (e: RTCPeerConnectionIceEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onIceConnectionStateChange(target: RTCPeerConnection, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onIceGatheringStateChange(target: RTCPeerConnection, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onNegotiationNeeded(target: RTCPeerConnection, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onSignalingStateChange(target: RTCPeerConnection, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onTrack(target: RTCPeerConnection, listener: (e: RTCTrackEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMessage(target: ServiceWorkerContainer, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onVoicesChanged(target: SpeechSynthesis, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onBoundary(target: SpeechSynthesisUtterance, listener: (e: SpeechSynthesisEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onEnd(target: SpeechSynthesisUtterance, listener: (e: SpeechSynthesisEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: SpeechSynthesisUtterance, listener: (e: SpeechSynthesisErrorEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMark(target: SpeechSynthesisUtterance, listener: (e: SpeechSynthesisEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPause(target: SpeechSynthesisUtterance, listener: (e: SpeechSynthesisEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onResume(target: SpeechSynthesisUtterance, listener: (e: SpeechSynthesisEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onStart(target: SpeechSynthesisUtterance, listener: (e: SpeechSynthesisEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCueChange(target: TextTrack, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onAddTrack(target: TextTrackList, listener: (e: TrackEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onChange(target: TextTrackList, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onRemoveTrack(target: TextTrackList, listener: (e: TrackEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onResize(target: VisualViewport, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onScroll(target: VisualViewport, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onClose(target: WebSocket, listener: (e: CloseEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: WebSocket, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onMessage(target: WebSocket, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onOpen(target: WebSocket, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onAfterPrint(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onAppInstalled(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onBeforePrint(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onBeforeUnload(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onBlur(target: Window, listener: (e: FocusEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCopy(target: Window, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCut(target: Window, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onCopy(target: Element, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDeviceMotion(target: Window, listener: (e: DeviceMotionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDeviceOrientation(target: Window, listener: (e: DeviceOrientationEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onDOMContentLoaded(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: Window, listener: (e: Event | UIEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onFocus(target: Window, listener: (e: FocusEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onHashChange(target: Window, listener: (e: HashChangeEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLanguageChange(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onLoad(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onMessageError(target: Window, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMessage(target: Window, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onOffline(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onOnline(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onPageHide(target: Window, listener: (e: PageTransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPageShow(target: Window, listener: (e: PageTransitionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPaste(target: Window, listener: (e: ClipboardEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onPopState(target: Window, listener: (e: PopStateEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onRejectionHandled(target: Window, listener: (e: PromiseRejectionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onResize(target: Window, listener: (e: UIEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onStorage(target: Window, listener: (e: StorageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onUnhanldedRejection(target: Window, listener: (e: PromiseRejectionEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onUnload(target: Window, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onMessageError(target: Worker, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onMessage(target: Worker, listener: (e: MessageEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLanguageChange(target: WindowOrWorkerGlobalScope, listener: (e: Event) => void, options?: boolean | AddEventListenerOptions): void;
  onAbort(target: XMLHttpRequest, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onError(target: XMLHttpRequest, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLoadEnded(target: XMLHttpRequest, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLoadStart(target: XMLHttpRequest, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onLoad(target: XMLHttpRequest, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onProgress(target: XMLHttpRequest, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
  onTimeout(target: XMLHttpRequest, listener: (e: ProgressEvent) => void, options?: boolean | AddEventListenerOptions): void;
}

export const elements: {
  [key: string]: any;
  html: HTMLHtmlElement;
  base: HTMLBaseElement;
  head: HTMLHeadElement;
  link: HTMLLinkElement;
  meta: HTMLMetaElement;
  style: HTMLStyleElement;
  title: HTMLTitleElement;
  body: HTMLBodyElement;
  address: HTMLElement;
  article: HTMLElement;
  aside: HTMLElement;
  footer: HTMLElement;
  header: HTMLElement;
  h1: HTMLHeadingElement;
  h2: HTMLHeadingElement;
  h3: HTMLHeadingElement;
  h4: HTMLHeadingElement;
  h5: HTMLHeadingElement;
  h6: HTMLHeadingElement;
  main: HTMLElement;
  nav: HTMLElement;
  section: HTMLElement;
  blockquote: HTMLQuoteElement;
  dd: HTMLElement;
  div: HTMLDivElement;
  dl: HTMLElement;
  dt: HTMLElement;
  figcaption: HTMLElement;
  figure: HTMLElement;
  hr: HTMLHRElement;
  li: HTMLLIElement;
  ol: HTMLOListElement;
  p: HTMLParagraphElement;
  pre: HTMLPreElement;
  ul: HTMLUListElement;
  a: HTMLAnchorElement;
  abbr: HTMLElement;
  b: HTMLElement;
  bdi: HTMLElement;
  bdo: HTMLElement;
  br: HTMLBRElement;
  cite: HTMLElement;
  code: HTMLElement;
  data: HTMLDataElement;
  dfn: HTMLElement;
  em: HTMLElement;
  i: HTMLElement;
  kbd: HTMLElement;
  mark: HTMLElement;
  q: HTMLQuoteElement;
  rp: HTMLElement;
  rt: HTMLElement;
  ruby: HTMLElement;
  s: HTMLElement;
  samp: HTMLElement;
  small: HTMLElement;
  span: HTMLSpanElement;
  strong: HTMLElement;
  sub: HTMLElement;
  sup: HTMLElement;
  time: HTMLTimeElement;
  u: HTMLElement;
  var: HTMLElement;
  wbr: HTMLElement;
  area: HTMLAreaElement;
  audio: HTMLAudioElement;
  img: HTMLImageElement;
  map: HTMLMapElement;
  track: HTMLTrackElement;
  video: HTMLVideoElement;
  embed: HTMLEmbedElement;
  iframe: HTMLIFrameElement;
  object: HTMLObjectElement;
  param: HTMLParamElement;
  picture: HTMLPictureElement;
  source: HTMLSourceElement;
  canvas: HTMLCanvasElement;
  noscript: HTMLElement;
  script: HTMLScriptElement;
  del: HTMLModElement;
  ins: HTMLModElement;
  caption: HTMLTableCaptionElement;
  col: HTMLTableColElement;
  colgroup: HTMLTableColElement;
  table: HTMLTableElement;
  tbody: HTMLTableSectionElement;
  td: HTMLTableCellElement;
  tfoot: HTMLTableSectionElement;
  th: HTMLTableCellElement;
  thead: HTMLTableSectionElement;
  tr: HTMLTableRowElement;
  button: HTMLButtonElement;
  datalist: HTMLDataListElement;
  fieldset: HTMLFieldSetElement;
  form: HTMLFormElement;
  input: HTMLInputElement;
  label: HTMLLabelElement;
  legend: HTMLLegendElement;
  meter: HTMLMeterElement;
  optgroup: HTMLOptGroupElement;
  option: HTMLOptionElement;
  output: HTMLOutputElement;
  progress: HTMLProgressElement;
  select: HTMLSelectElement;
  textarea: HTMLTextAreaElement;
  details: HTMLDetailsElement;
  menu: HTMLMenuElement;
  summary: HTMLElement;
  slot: HTMLSlotElement;
  template: HTMLTemplateElement;
}

export const html: {
  [key: string]: any;
  html: (properties?: Partial<HTMLHtmlElement> & { class?: string, text?: string }) => HTMLHtmlElement;
  base: (properties?: Partial<HTMLBaseElement> & { class?: string, text?: string }) => HTMLBaseElement;
  head: (properties?: Partial<HTMLHeadElement> & { class?: string, text?: string }) => HTMLHeadElement;
  link: (properties?: Partial<HTMLLinkElement> & { class?: string, text?: string }) => HTMLLinkElement;
  meta: (properties?: Partial<HTMLMetaElement> & { class?: string, text?: string }) => HTMLMetaElement;
  style: (properties?: Partial<HTMLStyleElement> & { class?: string, text?: string }) => HTMLStyleElement;
  title: (properties?: Partial<HTMLTitleElement> & { class?: string, text?: string }) => HTMLTitleElement;
  body: (properties?: Partial<HTMLBodyElement> & { class?: string, text?: string }) => HTMLBodyElement;
  address: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  article: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  aside: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  footer: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  header: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  h1: (properties?: Partial<HTMLHeadingElement> & { class?: string, text?: string }) => HTMLHeadingElement;
  h2: (properties?: Partial<HTMLHeadingElement> & { class?: string, text?: string }) => HTMLHeadingElement;
  h3: (properties?: Partial<HTMLHeadingElement> & { class?: string, text?: string }) => HTMLHeadingElement;
  h4: (properties?: Partial<HTMLHeadingElement> & { class?: string, text?: string }) => HTMLHeadingElement;
  h5: (properties?: Partial<HTMLHeadingElement> & { class?: string, text?: string }) => HTMLHeadingElement;
  h6: (properties?: Partial<HTMLHeadingElement> & { class?: string, text?: string }) => HTMLHeadingElement;
  main: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  nav: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  section: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  blockquote: (properties?: Partial<HTMLQuoteElement> & { class?: string, text?: string }) => HTMLQuoteElement;
  dd: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  div: (properties?: Partial<HTMLDivElement> & { class?: string, text?: string }) => HTMLDivElement;
  dl: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  dt: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  figcaption: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  figure: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  hr: (properties?: Partial<HTMLHRElement> & { class?: string, text?: string }) => HTMLHRElement;
  li: (properties?: Partial<HTMLLIElement> & { class?: string, text?: string }) => HTMLLIElement;
  ol: (properties?: Partial<HTMLOListElement> & { class?: string, text?: string }) => HTMLOListElement;
  p: (properties?: Partial<HTMLParagraphElement> & { class?: string, text?: string }) => HTMLParagraphElement;
  pre: (properties?: Partial<HTMLPreElement> & { class?: string, text?: string }) => HTMLPreElement;
  ul: (properties?: Partial<HTMLUListElement> & { class?: string, text?: string }) => HTMLUListElement;
  a: (properties?: Partial<HTMLAnchorElement> & { class?: string, text?: string }) => HTMLAnchorElement;
  abbr: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  b: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  bdi: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  bdo: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  br: (properties?: Partial<HTMLBRElement> & { class?: string, text?: string }) => HTMLBRElement;
  cite: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  code: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  data: (properties?: Partial<HTMLDataElement> & { class?: string, text?: string }) => HTMLDataElement;
  dfn: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  em: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  i: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  kbd: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  mark: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  q: (properties?: Partial<HTMLQuoteElement> & { class?: string, text?: string }) => HTMLQuoteElement;
  rp: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  rt: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  ruby: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  s: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  samp: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  small: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  span: (properties?: Partial<HTMLSpanElement> & { class?: string, text?: string }) => HTMLSpanElement;
  strong: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  sub: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  sup: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  time: (properties?: Partial<HTMLTimeElement> & { class?: string, text?: string }) => HTMLTimeElement;
  u: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  var: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  wbr: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  area: (properties?: Partial<HTMLAreaElement> & { class?: string, text?: string }) => HTMLAreaElement;
  audio: (properties?: Partial<HTMLAudioElement> & { class?: string, text?: string }) => HTMLAudioElement;
  img: (properties?: Partial<HTMLImageElement> & { class?: string, text?: string }) => HTMLImageElement;
  map: (properties?: Partial<HTMLMapElement> & { class?: string, text?: string }) => HTMLMapElement;
  track: (properties?: Partial<HTMLTrackElement> & { class?: string, text?: string }) => HTMLTrackElement;
  video: (properties?: Partial<HTMLVideoElement> & { class?: string, text?: string }) => HTMLVideoElement;
  embed: (properties?: Partial<HTMLEmbedElement> & { class?: string, text?: string }) => HTMLEmbedElement;
  iframe: (properties?: Partial<HTMLIFrameElement> & { class?: string, text?: string }) => HTMLIFrameElement;
  object: (properties?: Partial<HTMLObjectElement> & { class?: string, text?: string }) => HTMLObjectElement;
  param: (properties?: Partial<HTMLParamElement> & { class?: string, text?: string }) => HTMLParamElement;
  picture: (properties?: Partial<HTMLPictureElement> & { class?: string, text?: string }) => HTMLPictureElement;
  source: (properties?: Partial<HTMLSourceElement> & { class?: string, text?: string }) => HTMLSourceElement;
  canvas: (properties?: Partial<HTMLCanvasElement> & { class?: string, text?: string }) => HTMLCanvasElement;
  noscript: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  script: (properties?: Partial<HTMLScriptElement> & { class?: string, text?: string }) => HTMLScriptElement;
  del: (properties?: Partial<HTMLModElement> & { class?: string, text?: string }) => HTMLModElement;
  ins: (properties?: Partial<HTMLModElement> & { class?: string, text?: string }) => HTMLModElement;
  caption: (properties?: Partial<HTMLTableCaptionElement> & { class?: string, text?: string }) => HTMLTableCaptionElement;
  col: (properties?: Partial<HTMLTableColElement> & { class?: string, text?: string }) => HTMLTableColElement;
  colgroup: (properties?: Partial<HTMLTableColElement> & { class?: string, text?: string }) => HTMLTableColElement;
  table: (properties?: Partial<HTMLTableElement> & { class?: string, text?: string }) => HTMLTableElement;
  tbody: (properties?: Partial<HTMLTableSectionElement> & { class?: string, text?: string }) => HTMLTableSectionElement;
  td: (properties?: Partial<HTMLTableCellElement> & { class?: string, text?: string }) => HTMLTableCellElement;
  tfoot: (properties?: Partial<HTMLTableSectionElement> & { class?: string, text?: string }) => HTMLTableSectionElement;
  th: (properties?: Partial<HTMLTableCellElement> & { class?: string, text?: string }) => HTMLTableCellElement;
  thead: (properties?: Partial<HTMLTableSectionElement> & { class?: string, text?: string }) => HTMLTableSectionElement;
  tr: (properties?: Partial<HTMLTableRowElement> & { class?: string, text?: string }) => HTMLTableRowElement;
  button: (properties?: Partial<HTMLButtonElement> & { class?: string, text?: string }) => HTMLButtonElement;
  datalist: (properties?: Partial<HTMLDataListElement> & { class?: string, text?: string }) => HTMLDataListElement;
  fieldset: (properties?: Partial<HTMLFieldSetElement> & { class?: string, text?: string }) => HTMLFieldSetElement;
  form: (properties?: Partial<HTMLFormElement> & { class?: string, text?: string }) => HTMLFormElement;
  input: (properties?: Partial<HTMLInputElement> & { class?: string, text?: string }) => HTMLInputElement;
  label: (properties?: Partial<HTMLLabelElement> & { class?: string, text?: string }) => HTMLLabelElement;
  legend: (properties?: Partial<HTMLLegendElement> & { class?: string, text?: string }) => HTMLLegendElement;
  meter: (properties?: Partial<HTMLMeterElement> & { class?: string, text?: string }) => HTMLMeterElement;
  optgroup: (properties?: Partial<HTMLOptGroupElement> & { class?: string, text?: string }) => HTMLOptGroupElement;
  option: (properties?: Partial<HTMLOptionElement> & { class?: string, text?: string }) => HTMLOptionElement;
  output: (properties?: Partial<HTMLOutputElement> & { class?: string, text?: string }) => HTMLOutputElement;
  progress: (properties?: Partial<HTMLProgressElement> & { class?: string, text?: string }) => HTMLProgressElement;
  select: (properties?: Partial<HTMLSelectElement> & { class?: string, text?: string }) => HTMLSelectElement;
  textarea: (properties?: Partial<HTMLTextAreaElement> & { class?: string, text?: string }) => HTMLTextAreaElement;
  details: (properties?: Partial<HTMLDetailsElement> & { class?: string, text?: string }) => HTMLDetailsElement;
  menu: (properties?: Partial<HTMLMenuElement> & { class?: string, text?: string }) => HTMLMenuElement;
  summary: (properties?: Partial<HTMLElement> & { class?: string, text?: string }) => HTMLElement;
  slot: (properties?: Partial<HTMLSlotElement> & { class?: string, text?: string }) => HTMLSlotElement;
  template: (properties?: Partial<HTMLTemplateElement> & { class?: string, text?: string }) => HTMLTemplateElement;
}

export const svg: {
  [key: string]: any;
  a: (properties?: Partial<SVGAElement>) => SVGAElement;
  animate: (properties?: Partial<SVGAnimateElement>) => SVGAnimateElement;
  animateMotion: (properties?: Partial<SVGAnimateMotionElement>) => SVGAnimateMotionElement;
  animateTransform: (properties?: Partial<SVGAnimateTransformElement>) => SVGAnimateTransformElement;
  circle: (properties?: Partial<SVGCircleElement>) => SVGCircleElement;
  clipPath: (properties?: Partial<SVGClipPathElement>) => SVGClipPathElement;
  defs: (properties?: Partial<SVGDefsElement>) => SVGDefsElement;
  desc: (properties?: Partial<SVGDescElement>) => SVGDescElement;
  ellipse: (properties?: Partial<SVGEllipseElement>) => SVGEllipseElement;
  feBlend: (properties?: Partial<SVGFEBlendElement>) => SVGFEBlendElement;
  feColorMatrix: (properties?: Partial<SVGFEColorMatrixElement>) => SVGFEColorMatrixElement;
  feComponentTransfer: (properties?: Partial<SVGFEComponentTransferElement>) => SVGFEComponentTransferElement;
  feComposite: (properties?: Partial<SVGFECompositeElement>) => SVGFECompositeElement;
  feConvolveMatrix: (properties?: Partial<SVGFEConvolveMatrixElement>) => SVGFEConvolveMatrixElement;
  feDiffuseLighting: (properties?: Partial<SVGFEDiffuseLightingElement>) => SVGFEDiffuseLightingElement;
  feDisplacementMap: (properties?: Partial<SVGFEDisplacementMapElement>) => SVGFEDisplacementMapElement;
  feDistantLight: (properties?: Partial<SVGFEDistantLightElement>) => SVGFEDistantLightElement;
  feDropShadow: (properties?: Partial<SVGFEDropShadowElement>) => SVGFEDropShadowElement;
  feFlood: (properties?: Partial<SVGFEFloodElement>) => SVGFEFloodElement;
  feFuncA: (properties?: Partial<SVGFEFuncAElement>) => SVGFEFuncAElement;
  feFuncB: (properties?: Partial<SVGFEFuncBElement>) => SVGFEFuncBElement;
  feFuncG: (properties?: Partial<SVGFEFuncGElement>) => SVGFEFuncGElement;
  feFuncR: (properties?: Partial<SVGFEFuncRElement>) => SVGFEFuncRElement;
  feGaussianBlur: (properties?: Partial<SVGFEGaussianBlurElement>) => SVGFEGaussianBlurElement;
  feImage: (properties?: Partial<SVGFEImageElement>) => SVGFEImageElement;
  feMerge: (properties?: Partial<SVGFEMergeElement>) => SVGFEMergeElement;
  feMergeNode: (properties?: Partial<SVGFEMergeNodeElement>) => SVGFEMergeNodeElement;
  feMorphology: (properties?: Partial<SVGFEMorphologyElement>) => SVGFEMorphologyElement;
  feOffset: (properties?: Partial<SVGFEOffsetElement>) => SVGFEOffsetElement;
  fePointLight: (properties?: Partial<SVGFEPointLightElement>) => SVGFEPointLightElement;
  feSpecularLighting: (properties?: Partial<SVGFESpecularLightingElement>) => SVGFESpecularLightingElement;
  feSpotLight: (properties?: Partial<SVGFESpotLightElement>) => SVGFESpotLightElement;
  feTile: (properties?: Partial<SVGFETileElement>) => SVGFETileElement;
  feTurbulence: (properties?: Partial<SVGFETurbulenceElement>) => SVGFETurbulenceElement;
  filter: (properties?: Partial<SVGFilterElement>) => SVGFilterElement;
  foreignObject: (properties?: Partial<SVGForeignObjectElement>) => SVGForeignObjectElement;
  g: (properties?: Partial<SVGGElement>) => SVGGElement;
  image: (properties?: Partial<SVGImageElement>) => SVGImageElement;
  line: (properties?: Partial<SVGLineElement>) => SVGLineElement;
  linearGradient: (properties?: Partial<SVGLinearGradientElement>) => SVGLinearGradientElement;
  marker: (properties?: Partial<SVGMarkerElement>) => SVGMarkerElement;
  mask: (properties?: Partial<SVGMaskElement>) => SVGMaskElement;
  metadata: (properties?: Partial<SVGMetadataElement>) => SVGMetadataElement;
  mpath: (properties?: Partial<SVGMPathElement>) => SVGMPathElement;
  path: (properties?: Partial<SVGPathElement>) => SVGPathElement;
  pattern: (properties?: Partial<SVGPatternElement>) => SVGPatternElement;
  polygon: (properties?: Partial<SVGPolygonElement>) => SVGPolygonElement;
  polyline: (properties?: Partial<SVGPolylineElement>) => SVGPolylineElement;
  radialGradient: (properties?: Partial<SVGRadialGradientElement>) => SVGRadialGradientElement;
  rect: (properties?: Partial<SVGRectElement>) => SVGRectElement;
  script: (properties?: Partial<SVGScriptElement>) => SVGScriptElement;
  set: (properties?: Partial<SVGSetElement>) => SVGSetElement;
  stop: (properties?: Partial<SVGStopElement>) => SVGStopElement;
  style: (properties?: Partial<SVGStyleElement>) => SVGStyleElement;
  svg: (properties?: Partial<SVGSVGElement>) => SVGSVGElement;
  switch: (properties?: Partial<SVGSwitchElement>) => SVGSwitchElement;
  symbol: (properties?: Partial<SVGSymbolElement>) => SVGSymbolElement;
  text: (properties?: Partial<SVGTextElement>) => SVGTextElement;
  textPath: (properties?: Partial<SVGTextPathElement>) => SVGTextPathElement;
  title: (properties?: Partial<SVGTitleElement>) => SVGTitleElement;
  tspan: (properties?: Partial<SVGTSpanElement>) => SVGTSpanElement;
  use: (properties?: Partial<SVGUseElement>) => SVGUseElement;
  view: (properties?: Partial<SVGViewElement>) => SVGViewElement;
}
